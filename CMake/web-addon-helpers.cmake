###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team KODI                                            #
#     http://kodi.tv                                                          #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################

# Taken from other kodi addon-helpers.cmake to include more other add-on files

# Workaround for the fact that cpack's filenames are not customizable.
# Each add-on is added as a separate component to facilitate zip/tgz packaging.
# The filenames are always of the form basename-component, which is
# incompatible with the addonid-version scheme we want. This hack renames
# the files from the file names generated by the 'package' target.
# Sadly we cannot extend the 'package' target, as it is a builtin target, see
# http://public.kitware.com/Bug/view.php?id=8438
# Thus, we have to add an 'web-addon-package' target.
add_custom_target(web-addon-package
                  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target package)

macro(add_cpack_workaround target version ext)
  add_custom_command(TARGET web-addon-package PRE_BUILD
                     COMMAND ${CMAKE_COMMAND} -E rename addon-${target}-${version}.${ext} ${target}-${version}.${ext})
endmacro()

# Grab the version from a given add-on's addon.xml
macro (addon_version dir prefix)
  file(READ ${dir}/addon.xml ADDONXML)
  string(REGEX MATCH "<addon[^>]*version.?=.?.[0-9\\.]+" VERSION_STRING ${ADDONXML})
  string(REGEX REPLACE ".*version=.([0-9\\.]+).*" "\\1" ${prefix}_VERSION ${VERSION_STRING})
  message(STATUS ${prefix}_VERSION=${${prefix}_VERSION})
endmacro()

###############################################################################
# Build, link and optionally package an web add-on
# @param target Project name to use
# @param prefix Included project parts
# @param libs which required for it
# @param additional folders to install
macro (build_web_addon target prefix libs additionals)
  add_library(${target} ${${prefix}_SOURCES})
  target_link_libraries(${target} ${${libs}})
  addon_version(${target} ${prefix})
  set_target_properties(${target} PROPERTIES VERSION ${${prefix}_VERSION}
                                  SOVERSION ${APP_VERSION_MAJOR}.${APP_VERSION_MINOR}
                                  PREFIX "")
  if(OS STREQUAL "android")
    set_target_properties(${target} PROPERTIES PREFIX "lib")
  endif(OS STREQUAL "android")

  # set zip as default if web-addon-package is called without PACKAGE_XXX
  set(CPACK_GENERATOR "ZIP")
  set(ext "zip")
  if(PACKAGE_ZIP EQUAL 1 OR PACKAGE_TGZ EQUAL 1)
    if(PACKAGE_TGZ EQUAL 1)
      set(CPACK_GENERATOR "TGZ")
      set(ext "tar.gz")
    endif(PACKAGE_TGZ EQUAL 1)
    set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)
    set(CPACK_PACKAGE_FILE_NAME addon)
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
      set(CPACK_STRIP_FILES TRUE)
    endif(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
    set(CPACK_COMPONENTS_IGNORE_GROUPS 1)
    list(APPEND CPACK_COMPONENTS_ALL ${target}-${${prefix}_VERSION})
    # Pack files together to create an archive
    install(DIRECTORY ${target} DESTINATION ./ COMPONENT ${target}-${${prefix}_VERSION})
    if(WIN32)
      # get the installation location for the addon's target
      get_property(dll_location TARGET ${target} PROPERTY LOCATION)
      # in case of a VC++ project the installation location contains a $(Configuration) VS variable
      # we replace it with ${CMAKE_BUILD_TYPE} (which doesn't cover the case when the build configuration
      # is changed within Visual Studio)
      string(REPLACE "$(Configuration)" "${CMAKE_BUILD_TYPE}" dll_location "${dll_location}")

      # install the generated DLL file
      install(PROGRAMS ${dll_location} DESTINATION ${target}
              COMPONENT ${target}-${${prefix}_VERSION})

      if(CMAKE_BUILD_TYPE MATCHES Debug)
        # for debug builds also install the PDB file
        get_filename_component(dll_directory ${dll_location} DIRECTORY)
        install(FILES ${dll_directory}/${target}.pdb
                DESTINATION ${target}
                COMPONENT ${target}-${${prefix}_VERSION})
        install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/cef
                DESTINATION ${target}
                COMPONENT ${target}-${${prefix}_VERSION})
      endif()
    else(WIN32)
      install(TARGETS ${target}
              DESTINATION ${target}
              COMPONENT ${target}-${${prefix}_VERSION})
      install(DIRECTORY ${additionals}
              DESTINATION ${target}
              COMPONENT ${target}-${${prefix}_VERSION})
    endif(WIN32)
    add_cpack_workaround(${target} ${${prefix}_VERSION} ${ext})
  else(PACKAGE_ZIP EQUAL 1 OR PACKAGE_TGZ EQUAL 1)
    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
      if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
        message(STATUS "setting install paths to match ${APP_NAME}: CMAKE_INSTALL_PREFIX: ${${APP_NAME_UC}_PREFIX}")
        set(CMAKE_INSTALL_PREFIX "${${APP_NAME_UC}_PREFIX}" CACHE PATH "${APP_NAME} install prefix" FORCE)
        set(CMAKE_INSTALL_LIBDIR "${${APP_NAME_UC}_LIB_DIR}" CACHE PATH "${APP_NAME} install libdir" FORCE)
      elseif(NOT CMAKE_INSTALL_PREFIX STREQUAL "${${APP_NAME_UC}_PREFIX}" AND NOT OVERRIDE_PATHS)
        message(FATAL_ERROR "CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} differs from ${APP_NAME} prefix ${${APP_NAME_UC}_PREFIX}. Please pass -DOVERRIDE_PATHS=1 to skip this check")
      else()
        if(NOT CMAKE_INSTALL_LIBDIR)
          set(CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_PREFIX}/lib/${APP_NAME_LC}")
        endif()
      endif()
    else()
      set(CMAKE_INSTALL_LIBDIR "lib/${APP_NAME_LC}")
    endif()
    install(TARGETS ${target}
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/kodi/addons/${target})
    install(DIRECTORY ${target}
            DESTINATION share/kodi/addons)
    install(DIRECTORY ${additionals}
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/kodi/addons/${target})
  endif(PACKAGE_ZIP EQUAL 1 OR PACKAGE_TGZ EQUAL 1)
endmacro()

# finds a path to a given file (recursive)
function (kodi_find_path var_name filename search_path strip_file)
  file(GLOB_RECURSE PATH_TO_FILE ${search_path} ${filename})
  if(strip_file)
    string(REPLACE ${filename} "" PATH_TO_FILE ${PATH_TO_FILE})
  endif(strip_file)
  set (${var_name} ${PATH_TO_FILE} PARENT_SCOPE)
endfunction()

# Cmake build options
include(addoptions)
include(TestCXXAcceptsFlag)
OPTION(PACKAGE_ZIP "Package Zip file?" OFF)
OPTION(PACKAGE_TGZ "Package TGZ file?" OFF)
OPTION(BUILD_SHARED_LIBS "Build shared libs?" ON)

# LTO support?
CHECK_CXX_ACCEPTS_FLAG("-flto" HAVE_LTO)
IF(HAVE_LTO)
  OPTION(USE_LTO "use link time optimization" OFF)
  IF(USE_LTO)
    add_options(ALL_LANGUAGES ALL_BUILDS "-flto")
  ENDIF(USE_LTO)
ENDIF(HAVE_LTO)

# set this to try linking dependencies as static as possible
IF(ADDONS_PREFER_STATIC_LIBS)
  SET(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
ENDIF(ADDONS_PREFER_STATIC_LIBS)

